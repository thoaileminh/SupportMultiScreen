//apply plugin: 'com.android.application'
apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'signing'

//https://github.com/thoaileminh
group = 'com.github.thoaileminh'

android {
    compileSdkVersion 27
    defaultConfig {
        //applicationId "com.storm.supportmultiscreen"
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 2
        versionName "1.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

class SDPFactory extends DefaultTask {
    @Input
    String unit = "dp"
    @Input
    double positiveMax = 1000
    @Input
    double negativeMax = 100

    @TaskAction
    def create() {
        String resFolder = project.getProjectDir().getPath() + "/src/main/res/"
        for (double dimen = 300; dimen <= 800; dimen = dimen + 30) {
            String folder = resFolder + "values-sw" + (int) dimen + "dp"
            String fileName = folder + "/positive_sdps.xml"
            new File(folder).mkdir()
            new File(fileName).createNewFile()
            PrintWriter printWriter = new PrintWriter(fileName)
            printWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
            printWriter.println("<resources>")
            for (int i = 1; i <= positiveMax; i++) {
                double ratio = i / 300d
                double sdp = ratio * dimen
                printWriter.printf("\t<dimen name=\"_%dsdp\">%.2f" + unit + "</dimen>\r\n", i, sdp)
            }
            printWriter.println("</resources>")
            printWriter.close()
        }

        for (double dimen = 300; dimen <= 800; dimen = dimen + 30) {
            String folder = resFolder + "values-sw" + (int) dimen + "dp"
            String fileName = folder + "/negative_sdps.xml"
            new File(folder).mkdir()
            new File(fileName).createNewFile()
            PrintWriter printWriter = new PrintWriter(fileName)
            printWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
            printWriter.println("<resources>")
            for (int i = 1; i <= negativeMax; i++) {
                double ratio = i / 300d
                double sdp = ratio * dimen
                printWriter.printf("\t<dimen name=\"_minus%dsdp\">%.2f" + unit + "</dimen>\r\n", i, -sdp);
            }
            printWriter.println("</resources>")
            printWriter.close()
        }
    }
}

task createSDP(type: SDPFactory) {
}

//uncomment next line to edit values
//preBuild.dependsOn createSDP

createSDP {
    unit = "dp"//change to "sp" if needed
    positiveMax = 1000//change to 1000 or any other value if needed
    negativeMax = 100//change to 100 or any other value if needed
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}